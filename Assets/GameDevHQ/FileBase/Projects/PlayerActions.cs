//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/GameDevHQ/FileBase/Projects/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""Phone"",
            ""id"": ""27e41a25-abcb-4e1b-8e31-f847e84142c2"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""9e491870-f205-470d-9211-8bfa52ddc1dc"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Regular Weapon"",
                    ""type"": ""Button"",
                    ""id"": ""ef92659f-5d33-4491-8692-22d0122a5429"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Special Weabon"",
                    ""type"": ""Button"",
                    ""id"": ""c6fa979b-9204-47df-b5d9-71a25a837909"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""3D Vector"",
                    ""id"": ""3f90d6f1-b8e9-42da-8b6a-e3a47455f451"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""3c31df1b-c350-48e2-8aa1-b232385b8a9f"",
                    ""path"": ""<Gyroscope>/angularVelocity/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Phone"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""9296aff0-a8a3-4365-8011-1102342f71f1"",
                    ""path"": ""<Gyroscope>/angularVelocity/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Phone"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""19331734-14df-4839-9177-471b5fa15908"",
                    ""path"": ""<Gyroscope>/angularVelocity/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Phone"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ad2273ea-5d4c-4a23-ace8-715a01410716"",
                    ""path"": ""<Gyroscope>/angularVelocity/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Phone"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""2ca119a0-a783-4aac-a024-2ce28b090d86"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Phone"",
                    ""action"": ""Regular Weapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""69543f21-86ff-4286-90b3-921afffc096c"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Phone"",
                    ""action"": ""Special Weabon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard"",
            ""id"": ""9799ea8e-7c49-4991-aa66-2c65b3c86bb8"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""f50c9e7e-2e36-405c-ab0a-697e3cc8bb91"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Regular Weapon"",
                    ""type"": ""Button"",
                    ""id"": ""7e4683ba-4f72-4133-9c84-e1ee9a2b69cc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Special Weapon"",
                    ""type"": ""Button"",
                    ""id"": ""95799024-aae2-4ba1-9f6b-4d2a2d1d07a9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""a934261d-76af-4da2-ab70-845a02ad7f1e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Restart"",
                    ""type"": ""Button"",
                    ""id"": ""8558d835-4ee7-4112-94f0-5d6951a800dc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Speed"",
                    ""type"": ""Button"",
                    ""id"": ""b8a6f65d-50a0-48e2-81aa-5c0c0966a807"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""11046fbc-8b8f-48d9-80d8-3a8da12135f1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""c9d8dedc-bf65-49ce-8ce5-d72d2acb7c17"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f0cf6bbd-94f3-4ef4-bbcf-93e50344ae5e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""563a9f16-1fd5-4ac0-b2fa-2ffcc1b42d3a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""881b3cbf-0f31-4a17-9f81-103f3055b152"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""edd22dd4-c0df-46b9-9352-1afa9d011729"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c0d65767-a560-4bcc-b5ea-da9173fc7665"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Regular Weapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7d4a438b-072c-4f29-915b-a53bb4aa72f6"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Special Weapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e28b9e13-4ab3-4ec2-b50d-450cb3ff427e"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ca84adbb-280d-41e1-b812-487a835d91ef"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Restart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""52a9e59a-bc09-4ca5-b997-380560c4e944"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Speed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""056ccea4-ba31-4051-8af5-541cd3a3bc44"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Phone"",
            ""bindingGroup"": ""Phone"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gyroscope>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Phone
        m_Phone = asset.FindActionMap("Phone", throwIfNotFound: true);
        m_Phone_Movement = m_Phone.FindAction("Movement", throwIfNotFound: true);
        m_Phone_RegularWeapon = m_Phone.FindAction("Regular Weapon", throwIfNotFound: true);
        m_Phone_SpecialWeabon = m_Phone.FindAction("Special Weabon", throwIfNotFound: true);
        // Keyboard
        m_Keyboard = asset.FindActionMap("Keyboard", throwIfNotFound: true);
        m_Keyboard_Movement = m_Keyboard.FindAction("Movement", throwIfNotFound: true);
        m_Keyboard_RegularWeapon = m_Keyboard.FindAction("Regular Weapon", throwIfNotFound: true);
        m_Keyboard_SpecialWeapon = m_Keyboard.FindAction("Special Weapon", throwIfNotFound: true);
        m_Keyboard_Escape = m_Keyboard.FindAction("Escape", throwIfNotFound: true);
        m_Keyboard_Restart = m_Keyboard.FindAction("Restart", throwIfNotFound: true);
        m_Keyboard_Speed = m_Keyboard.FindAction("Speed", throwIfNotFound: true);
        m_Keyboard_Pause = m_Keyboard.FindAction("Pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Phone
    private readonly InputActionMap m_Phone;
    private IPhoneActions m_PhoneActionsCallbackInterface;
    private readonly InputAction m_Phone_Movement;
    private readonly InputAction m_Phone_RegularWeapon;
    private readonly InputAction m_Phone_SpecialWeabon;
    public struct PhoneActions
    {
        private @PlayerActions m_Wrapper;
        public PhoneActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Phone_Movement;
        public InputAction @RegularWeapon => m_Wrapper.m_Phone_RegularWeapon;
        public InputAction @SpecialWeabon => m_Wrapper.m_Phone_SpecialWeabon;
        public InputActionMap Get() { return m_Wrapper.m_Phone; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PhoneActions set) { return set.Get(); }
        public void SetCallbacks(IPhoneActions instance)
        {
            if (m_Wrapper.m_PhoneActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_PhoneActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PhoneActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PhoneActionsCallbackInterface.OnMovement;
                @RegularWeapon.started -= m_Wrapper.m_PhoneActionsCallbackInterface.OnRegularWeapon;
                @RegularWeapon.performed -= m_Wrapper.m_PhoneActionsCallbackInterface.OnRegularWeapon;
                @RegularWeapon.canceled -= m_Wrapper.m_PhoneActionsCallbackInterface.OnRegularWeapon;
                @SpecialWeabon.started -= m_Wrapper.m_PhoneActionsCallbackInterface.OnSpecialWeabon;
                @SpecialWeabon.performed -= m_Wrapper.m_PhoneActionsCallbackInterface.OnSpecialWeabon;
                @SpecialWeabon.canceled -= m_Wrapper.m_PhoneActionsCallbackInterface.OnSpecialWeabon;
            }
            m_Wrapper.m_PhoneActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @RegularWeapon.started += instance.OnRegularWeapon;
                @RegularWeapon.performed += instance.OnRegularWeapon;
                @RegularWeapon.canceled += instance.OnRegularWeapon;
                @SpecialWeabon.started += instance.OnSpecialWeabon;
                @SpecialWeabon.performed += instance.OnSpecialWeabon;
                @SpecialWeabon.canceled += instance.OnSpecialWeabon;
            }
        }
    }
    public PhoneActions @Phone => new PhoneActions(this);

    // Keyboard
    private readonly InputActionMap m_Keyboard;
    private IKeyboardActions m_KeyboardActionsCallbackInterface;
    private readonly InputAction m_Keyboard_Movement;
    private readonly InputAction m_Keyboard_RegularWeapon;
    private readonly InputAction m_Keyboard_SpecialWeapon;
    private readonly InputAction m_Keyboard_Escape;
    private readonly InputAction m_Keyboard_Restart;
    private readonly InputAction m_Keyboard_Speed;
    private readonly InputAction m_Keyboard_Pause;
    public struct KeyboardActions
    {
        private @PlayerActions m_Wrapper;
        public KeyboardActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Keyboard_Movement;
        public InputAction @RegularWeapon => m_Wrapper.m_Keyboard_RegularWeapon;
        public InputAction @SpecialWeapon => m_Wrapper.m_Keyboard_SpecialWeapon;
        public InputAction @Escape => m_Wrapper.m_Keyboard_Escape;
        public InputAction @Restart => m_Wrapper.m_Keyboard_Restart;
        public InputAction @Speed => m_Wrapper.m_Keyboard_Speed;
        public InputAction @Pause => m_Wrapper.m_Keyboard_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Keyboard; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyboardActions set) { return set.Get(); }
        public void SetCallbacks(IKeyboardActions instance)
        {
            if (m_Wrapper.m_KeyboardActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnMovement;
                @RegularWeapon.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnRegularWeapon;
                @RegularWeapon.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnRegularWeapon;
                @RegularWeapon.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnRegularWeapon;
                @SpecialWeapon.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnSpecialWeapon;
                @SpecialWeapon.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnSpecialWeapon;
                @SpecialWeapon.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnSpecialWeapon;
                @Escape.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnEscape;
                @Escape.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnEscape;
                @Escape.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnEscape;
                @Restart.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnRestart;
                @Restart.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnRestart;
                @Restart.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnRestart;
                @Speed.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnSpeed;
                @Speed.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnSpeed;
                @Speed.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnSpeed;
                @Pause.started -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_KeyboardActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_KeyboardActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @RegularWeapon.started += instance.OnRegularWeapon;
                @RegularWeapon.performed += instance.OnRegularWeapon;
                @RegularWeapon.canceled += instance.OnRegularWeapon;
                @SpecialWeapon.started += instance.OnSpecialWeapon;
                @SpecialWeapon.performed += instance.OnSpecialWeapon;
                @SpecialWeapon.canceled += instance.OnSpecialWeapon;
                @Escape.started += instance.OnEscape;
                @Escape.performed += instance.OnEscape;
                @Escape.canceled += instance.OnEscape;
                @Restart.started += instance.OnRestart;
                @Restart.performed += instance.OnRestart;
                @Restart.canceled += instance.OnRestart;
                @Speed.started += instance.OnSpeed;
                @Speed.performed += instance.OnSpeed;
                @Speed.canceled += instance.OnSpeed;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public KeyboardActions @Keyboard => new KeyboardActions(this);
    private int m_PhoneSchemeIndex = -1;
    public InputControlScheme PhoneScheme
    {
        get
        {
            if (m_PhoneSchemeIndex == -1) m_PhoneSchemeIndex = asset.FindControlSchemeIndex("Phone");
            return asset.controlSchemes[m_PhoneSchemeIndex];
        }
    }
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IPhoneActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnRegularWeapon(InputAction.CallbackContext context);
        void OnSpecialWeabon(InputAction.CallbackContext context);
    }
    public interface IKeyboardActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnRegularWeapon(InputAction.CallbackContext context);
        void OnSpecialWeapon(InputAction.CallbackContext context);
        void OnEscape(InputAction.CallbackContext context);
        void OnRestart(InputAction.CallbackContext context);
        void OnSpeed(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
}
